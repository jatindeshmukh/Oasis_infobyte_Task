# -*- coding: utf-8 -*-
"""OASIS INFOBYTE TASK3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ery8-7MCFNL_hIKVmNaZPMpYGPcuVtAt
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

################# Machine Learning ################
import statsmodels
from statsmodels.stats.anova import anova_lm
from statsmodels.stats.outliers_influence import variance_inflation_factor

################# Data Visualization ################
import seaborn as sns
from matplotlib import pyplot as plt
# %matplotlib inline

df = pd.read_csv(r"/content/Advertising.csv")
df.head()

"""Data Pre-Processing"""

df.info()

"""Removing Irrelevent Columns"""

# Check if the 'Id' column exists before dropping it
if 'Id' in df.columns:
    df = df.drop('Id', axis=1)
    print("Column 'Id' dropped successfully.")
else:
    print("Column 'Id' not found in DataFrame.")

# Display the first few rows of the DataFrame to verify
df.head()

"""Identifying and Treatment of Missing Values"""

# count the number of NaN values in each column
df.isnull().sum()

"""dentifying And Treatment of Outliers"""

sns.boxplot(data=df)

"""Descriptive Analysis"""

df.describe()

df.corr()

"""Data Visualization"""

# Let's see how Sales are related with other variables using scatter plot.
sns.pairplot(df, x_vars=['TV', 'Newspaper', 'Radio'], y_vars='Sales', height=4, aspect=1, kind='scatter')
plt.show()

""" Assumption of Model"""

# Assuming you want to create a linear regression model
import statsmodels.formula.api as sm

# Define your model (replace 'Sales ~ TV + Radio + Newspaper' with your actual formula)
model2 = sm.ols('Sales ~ TV + Radio + Newspaper', data=df).fit()

df['fitted_value'] = model2.fittedvalues  # Predicted Value
df['residual'] = model2.resid  # Error
df.head()

"""Linearity"""

df.plot.scatter(x='TV', y='Sales', title='Sales vs TV')

df['residual'].plot.hist()

"""Train Accuracy

"""

from sklearn.metrics import r2_score
r2 = r2_score(df.Sales, df.fitted_value)
print('R2 score for model Performance on Test', np.round(r2,2))

"""Test Accuracy"""

from sklearn.metrics import r2_score
import pandas as pd # Import pandas to work with DataFrames
import numpy as np # Import the NumPy library

# Update the file path to the correct location of your CSV file
file_path = '/content/Advertising.csv'  # Replace with the actual file path
df_test = pd.read_csv(file_path)

# Verify the column names in your DataFrame
print(df_test.columns)

# Initialize 'predictions' with some values.
# Replace this with your actual model predictions.
predictions = [0] * len(df_test) # Example: a list of zeros

# Add the predictions to the DataFrame
df_test['predicted_sales'] = predictions

r2 = r2_score(df_test['Sales'], df_test['predicted_sales'])
print('R2 score for model Performance on Test', np.round(r2,2)) # Now you can use np.round